{"version":3,"sources":["BooksAPI.js","BookshelfChanger.js","Books.js","Bookshelf.js","Main.js","SearchBooksBar.js","SearchBooksResults.js","SearchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","maxResults","BookshelfChanger","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveShelf","event","setState","target","value","bookObject","state","react_default","a","createElement","className","onChange","disabled","React","Component","Books","foundShelf","foundBook","_this2","list","find","li","image","imageLinks","thumbnail","style","width","height","backgroundImage","src_BookshelfChanger","title","authors","Bookshelf","getBooks","BooksAPI","resp","filter","index","altName","newShelf","prevProps","updaterList","shelfUpdate","name","map","key","src_Books","URL","MainPage","src_Bookshelf","Link","to","SearchBooksBar","input","handleChange","querySearcher","process","type","placeholder","SearchBooksResults","allBooks","searchList","length","SearchPage","src_SearchBooksBar","src_SearchBooksResults","BooksApp","bookToChange","shelfToChangeTo","catch","console","log","Route","exact","path","render","Main","src_SearchPage","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8b1bd87a.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\n//delete localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\n\nclass BookshelfChanger extends React.Component {\n    constructor(props) {\n  \tsuper(props)\n\n    this.state = {\n    \tshelf: '',\n    }\n  }\n  \n  componentDidMount() {\n  \tthis.setState(\n      {shelf: this.props.shelf }\n    )\n  }\n  \n  moveShelf = (event) => {\n  \tthis.setState(\n      {shelf: event.target.value},\n      this.props.method(this.props.bookObject, event.target.value)\n    );\n  }\n\n  render() {\n    return(\n      <div className=\"book-shelf-changer\">\n        <select value={this.state.shelf || this.props.shelf || \"none\"} onChange={this.moveShelf}>\n          <option value=\"move\" disabled>Move to...</option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BookshelfChanger \n","import React from 'react'\nimport BookshelfChanger from './BookshelfChanger.js'\n\nclass Books extends React.Component {\n  \tstate = {\n    \tfoundShelf: ''\n    }\n\tcomponentDidMount() {\n    \tlet foundBook\n\t\tif(this.props.shelf === \"\" ){foundBook = this.props.list.find(li => li.id === this.props.id)}\n\t\tif(foundBook){this.setState({foundShelf: foundBook.shelf})}\n    }\n\t\t\n  render() {\n    //correct issue with biography book images not displaying\n    let image = \"none\"\n    this.props.bookObject.imageLinks ? image = this.props.bookObject.imageLinks.thumbnail : image = \"none\"\n    return(\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: \"url(\"+ image +\")\" }}></div>\n          <BookshelfChanger \n\t\t\tbookObject={this.props.bookObject} \n\t\t\tid={this.props.id} \n\t\t\tshelf={this.state.foundShelf || this.props.shelf} \n\t\t\tmethod={this.props.method}\n\t\t\tlist={this.props.list}\n\t\t  />\n        </div>\n        <div className=\"book-title\">{this.props.title}</div>\n        <div className=\"book-authors\">{this.props.authors}</div>\n      </div>\n    );\n  }\n}\n\nexport default Books\n","import React from 'react'\nimport Books from './Books.js'\nimport * as BooksAPI from './BooksAPI'\n\nclass Bookshelf extends React.Component {\n  constructor(props) {\n  \tsuper(props)\n\n    this.state = {\n    \tlist: [],\n      \tnewShelf: '',\n    }\n  }\n  //request user's books list from BooksAPI, filters results for particular shelf and sets state\n  getBooks = () => {\n  \tBooksAPI.getAll().then(resp => {\n     this.setState({list: resp.filter( (index) => index.shelf === this.props.altName )})\n    });\n  }\n  \n  componentDidMount() {\n    this.getBooks()\n  }\n// if changes are made to updater list, requests books list from BooksAPI\n  componentDidUpdate(prevProps) {\n  if (this.props.updaterList !== prevProps.updaterList) {\n    this.getBooks()\n  }\n}\n   render() {\n     let shelfUpdate = this.props.shelfUpdate;\n     let bookObject;\n    return(\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{this.props.name}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">\n{this.state.list.map(\n \tfunction(book) {\n      \tbookObject = book;\n\t\treturn(\n      <li key={book.id} >\n\t\t<Books \n\t\t\tbookObject={bookObject} \n\t\t\tmethod={shelfUpdate} \n\t\t\tkey={book.id} \n\t\t\tlist={[]}\n\t\t\tid={book.id} \n\t\t\ttitle={book.title} \n\t\t\tauthors={book.authors || \"N/A\"} \n\t\t\tURL={\n              book.imageLinks.thumbnail\n            } \n\t\t\tshelf={book.shelf}\n\t\t/>\n\t  </li>\n\t )\n    }\n )}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Bookshelf\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Bookshelf from './Bookshelf.js'\n\nclass MainPage extends React.Component {\n  render() {   \n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            <Bookshelf list={this.props.list} updaterList={this.props.updaterList} shelfUpdate={this.props.shelfUpdate} name=\"Currently Reading\" altName=\"currentlyReading\"/>\n            <Bookshelf list={this.props.list} updaterList={this.props.updaterList} shelfUpdate={this.props.shelfUpdate} name=\"Want to Read\" altName=\"wantToRead\"/>\n            <Bookshelf list={this.props.list} updaterList={this.props.updaterList} shelfUpdate={this.props.shelfUpdate} name=\"Read\" altName=\"read\"/>\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"/Search\" className=\"search-bar-link\">Add a book</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass SearchBooksBar extends React.Component {\n  state = {\n    input: '',\n  }\n//takes user input updates component state with value, then passes state to app Component method to query BooksAPI\n  handleChange = (event) => {\n    this.setState({input: event.target.value},\n                 () => this.props.querySearcher(this.state.input)\n                 )\n  }\n\n  render() {\n    return (\n      <div className=\"search-books-bar\" >\n        <Link to={process.env.PUBLIC_URL + '/'} className=\"close-search\">Close</Link>\n        <div className=\"search-books-input-wrapper\" >\n          <input\n             type=\"text\"\n             placeholder=\"Search by title or author\"\n             value={this.state.input}\n             onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBooksBar\n","import React from 'react'\nimport Books from './Books.js'\nimport * as BooksAPI from './BooksAPI'\n\nclass SearchBooksResults extends React.Component {\n  state = {\n    allBooks:[]\n  }\n\tcomponentDidMount() {\n    \tBooksAPI.getAll()\n\t\t.then(resp => this.setState({allBooks: resp}) )\n    }\n  render() {\n    let shelfUpdate = this.props.shelfUpdate;\n    let list = this.state.allBooks\n    let bookObject\n    return(\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n    {this.props.searchList.length >= 1 ? this.props.searchList.map(\n \tfunction(book) {\n      \tbookObject = book;\n\t\treturn(\n      <li key={book.id} >\n\t\t<Books\n\t\t\tbookObject={bookObject}\n\t\t\tmethod={shelfUpdate}\n\t\t\tkey={book.id}\n\t\t\tid={book.id}\n\t\t\ttitle={book.title}\n\t\t\tauthors={book.authors || \"N/A\"}\n\t\t\tshelf={''}\n    \t\tlist={list}\n\t\t/>\n\t  </li>\n\t )\n    }\n ): false}\n      \t</ol>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooksResults\n","import React from 'react'\nimport SearchBooksBar from './SearchBooksBar.js'\nimport SearchBooksResults from './SearchBooksResults.js'\n\nclass SearchPage extends React.Component {\n\n\trender() {\n    \treturn(\n        <div className=\"search-books\">\n            <SearchBooksBar searchList={this.props.searchList} querySearcher={this.props.querySearcher}/>\n            <SearchBooksResults list={this.props.list} searchList={this.props.searchList} shelfUpdate={this.props.shelfUpdate}/>\n        </div>\n        )\n    }\n}\n\nexport default SearchPage\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport MainPage from './Main.js'\nimport SearchPage from './SearchPage.js'\nimport { Route } from 'react-router-dom'\n\nclass BooksApp extends React.Component {\n  state = {\n    \tlist: [],\n    \tsearchList: [],\n    \tupdaterList: [],\n  }\n// takes in arguments from bookshelfChanger component, sends to BooksAPI to save user changes, then updates state with list\n shelfUpdate = (bookToChange, shelfToChangeTo) => {\n  \tBooksAPI.update(bookToChange, shelfToChangeTo)\n    .then(resp => this.setState( {updaterList: resp} ) )\n    .catch(resp => console.log(resp))\n  }\n// takes input from SearchBar component, sends to BooksAPI to request list of matching books, then updates state with list\nquerySearcher = (query) => {\n  \tquery === '' ? this.setState( {searchList: [], }) :\n\tBooksAPI.search(query, 20)\n\t\t.then(resp =>\n              //console.log(resp)\n              this.setState( {searchList: resp})\n             )\n  \t\t.catch(resp =>\n               this.setState( {searchList: [], })\n              )\n}\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path={process.env.PUBLIC_URL + '/'} render={() => (<MainPage list={this.state.list} updaterList={this.state.updaterList} shelfUpdate={this.shelfUpdate} />) }/>\n    \t<Route path=\"/Search\" render={() => (<SearchPage list={this.state.list} searchList={this.state.searchList} updaterList={this.state.updaterList} shelfUpdate={this.shelfUpdate} querySearcher={this.querySearcher} />)}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}